name: Podcast API CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'podcast-api/**'
      - '.github/workflows/podcast-api-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'podcast-api/**'
      - '.github/workflows/podcast-api-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: quarkus
          POSTGRES_USER: quarkus
          POSTGRES_DB: quarkus
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: quarkus
          RABBITMQ_DEFAULT_PASS: quarkus
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and test podcast-api with coverage
      working-directory: podcast-api
      run: ./mvnw clean verify -Dquarkus.test.profile=test
      env:
        TESTCONTAINERS_RYUK_DISABLED: true
        QUARKUS_LANGCHAIN4J_AZURE_OPENAI_RESOURCE_NAME: ${{ secrets.QUARKUS_LANGCHAIN4J_AZURE_OPENAI_RESOURCE_NAME }}
        QUARKUS_LANGCHAIN4J_AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.QUARKUS_LANGCHAIN4J_AZURE_OPENAI_DEPLOYMENT_NAME }}
        QUARKUS_LANGCHAIN4J_AZURE_OPENAI_API_KEY: ${{ secrets.QUARKUS_LANGCHAIN4J_AZURE_OPENAI_API_KEY }}
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./podcast-api/target/jacoco-report/jacoco.xml
        flags: podcast-api
        name: podcast-api-coverage
        fail_ci_if_error: false